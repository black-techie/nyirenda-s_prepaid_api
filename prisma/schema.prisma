generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Sms {
  id        Int      @id @default(autoincrement())
  to        String
  content   String
  status    String   @default("UNSENT")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Provider {
  id          Int      @id @default(autoincrement())
  companyName String   @db.VarChar(255)
  baseurl     String   @db.VarChar(255)
  username    String   @db.VarChar(255)
  password    String   @db.VarChar(255)
  meters      Meter[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Logs {
  id        Int      @id @default(autoincrement())
  type      Int      @default(0)
  info      String
  clientId  Int?
  meterId   Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model majisTransactions {
  id             Int      @id @default(autoincrement())
  paymentReceipt String   @unique
  amountPaid     Float
  units          Float
  meterNumber    String
  token          String?
  accountNumber  String
  status         Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Transaction {
  id                Int      @id @unique @default(autoincrement())
  meter             Meter    @relation(fields: [meterId], references: [id])
  meterId           Int
  amount            Float
  units             Float
  token             String?  @db.VarChar(255)
  status            Boolean  @default(false)
  referenceID       String
  remoteReferenceID String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model User {
  id         Int      @id @default(autoincrement())
  firstName  String   @db.VarChar(255)
  lastName   String   @db.VarChar(255)
  phone      String   @unique @db.VarChar(255)
  location   Location @relation(fields: [locationId], references: [id])
  locationId Int
  meter      Meter    @relation(fields: [meterId], references: [id])
  meterId    Int      @unique
  key        String   @db.VarChar(255)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Location {
  id             Int      @id @default(autoincrement())
  gpsCoordinates String?  @db.VarChar(255)
  country        String   @db.VarChar(255)
  region         String   @db.VarChar(255)
  district       String   @db.VarChar(255)
  ward           String   @db.VarChar(255)
  street         String   @db.VarChar(255)
  client         Client   @relation(fields: [clientId], references: [id])
  clientId       Int
  Users          User[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Meter {
  id           Int           @id @default(autoincrement())
  serialNumber BigInt        @unique
  meterType    String        @db.VarChar(255)
  parameters   String?
  transactions Transaction[]
  unitPrice    Int           @default(1000)
  user         User?
  client       Client        @relation(fields: [clientId], references: [id])
  clientId     Int
  Provider     Provider      @relation(fields: [providerId], references: [id])
  providerId   Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model paymentGateway {
  id      Int      @id @default(autoincrement())
  name    String   @db.VarChar(255)
  url     String   @db.VarChar(255)
  headers String   @db.VarChar(255)
  method  String   @db.VarChar(255)
  clients Client[]
}

model Client {
  id                 Int             @id @default(autoincrement())
  name               String          @db.VarChar(255)
  email              String          @unique @db.VarChar(255)
  registrationNumber Int             @unique
  meters             Meter[]
  locations          Location[]
  admin              Admin           @relation(fields: [adminId], references: [id])
  adminId            Int
  key                String          @db.VarChar(255)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  paymentGateway     paymentGateway? @relation(fields: [paymentGatewayId], references: [id])
  paymentGatewayId   Int?
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  key       String   @db.VarChar(255)
  level     Int      @default(0)
  clients   Client[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
